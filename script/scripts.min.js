gsap.registerPlugin(ScrollTrigger),
  gsap.registerPlugin(MorphSVGPlugin),
  gsap.registerPlugin(DrawSVGPlugin),
  gsap.registerPlugin(MotionPathPlugin);
const petitBonhommeJaune = document.querySelector(".SpriteSheet"),
  animMarche = gsap.fromTo(
    ".SpriteSheet",
    {
      scrollTrigger: {
        trigger: ".chapitre1",
        start: "50% bottom",
        end: "bottom top",
        onUpdate(e) {
          window.addEventListener("scroll", function () {
            petitBonhommeJaune.classList.add("is-scrolling"), animMarche.play();
          }),
            window.setInterval(function () {
              petitBonhommeJaune.classList.remove("is-scrolling"),
                animMarche.pause();
            }, 100);
        },
        x: "-1000px",
      },
    },
    { x: "1500px", duration: 30 }
  ),
  tlpara = gsap.timeline({
    scrollTrigger: {
      trigger: ".chapitre2",
      scrub: !0,
      start: "top 45%",
      end: "bottom top",
    },
  });
tlpara
  .to("#montagneSemiPale", { x: -300, duration: 5 }, "-=5")
  .to("#montagnePale", { x: 200, duration: 5 }, "-=5")
  .to("#montagneFonce", { x: -100, duration: 5 }, "-=5");
const tl_etoile = gsap.timeline({
  paused: !1,
  scrollTrigger: {
    toggleActions: "play none none none",
    trigger: ".chapitre3",
    start: "top center",
    end: "bottom center",
  },
  repeat: -1,
  repeatDelay: 2,
});
for (let i = 1; i <= 18; i++)
  tl_etoile.to("#etoile" + i, { opacity: 0 }),
    tl_etoile.set(
      "#etoile" + i,
      { backgroundColor: "#6adae400" },
      { opacity: 1 },
      "+=1"
    ),
    tl_etoile.to("#etoile" + i, { opacity: 1 }, "+=1");
tl_etoile.fromTo("#etoile1", { x: "-600px" }, { x: "1500px", duration: 5 });
const tl_tombe = gsap.timeline({
  scrollTrigger: {
    trigger: ".chapitre5",
    start: "top 25%",
    end: "bottom 50%",
    toggleActions: "play complete reverse reset",
  },
});
tl_tombe
  .fromTo(
    ".tombe1",
    { y: -400 },
    { rotation: 2400, duration: 5, y: 500 },
    "start"
  )
  .to("#nuage1", { duration: 9, y: -800 }, "start")
  .to("#nuage2", { duration: 5, y: -800 }, "start"),
  gsap.to("#ballonPath", {
    scrollTrigger: {
      trigger: ".chapitre6",
      scrub: 1,
      start: "center center",
      end: "bottom center",
    },
    motionPath: {
      path: "#path",
      align: "#path",
      alignOrigin: [0.5, 0.5],
      autoRotate: !1,
    },
  });
const tl3 = gsap
    .timeline({
      scrollTrigger: {
        trigger: ".chapitre6",
        scrub: 1,
        start: "center center",
        end: "bottom center",
      },
    })
    .to("#tomber2", { opacity: 1, duration: 3, opacity: 0 })
    .to("#flotte", { opacity: 1, duration: 5, opacity: 1 }),
  tl_animMarche = gsap
    .timeline({
      scrollTrigger: {
        toggleActions: "play none none reset",
        trigger: ".chapitre7",
        start: "50% bottom",
        end: "bottom top",
      },
    })
    .fromTo(
      ".SpriteSheet2",
      { x: "-100px" },
      { x: "1500px", duration: 30 },
      "start"
    )
    .fromTo("#oiseau", { x: "-600px" }, { x: "1000px", duration: 5 }, "start");
function findShapeIndex(e, t, r) {
  r = r || {};
  var o,
    n,
    a,
    l,
    s,
    d,
    c,
    p,
    $,
    g,
    u,
    m,
    h,
    y,
    x = document,
    b = function (e) {
      return x.querySelectorAll(e);
    },
    f = function (e, t) {
      var r,
        o = x.createElementNS("http://www.w3.org/2000/svg", e),
        n = /([a-z])([A-Z])/g;
      for (r in t)
        o.setAttributeNS(null, r.replace(n, "$1-$2").toLowerCase(), t[r]);
      return o;
    },
    _ = /[-+=\.]*\d+[\.e\-\+]*\d*[e\-\+]*\d*/gi,
    k = /(^[#\.][a-z]|[a-y][a-z])/gi,
    v = (e, t, r) => {
      let o, n;
      return (
        ("string" != typeof e || k.test(e) || (e.match(_) || []).length < 3) &&
          ((o = gsap.utils.toArray(e)[0])
            ? ((n = (o.nodeName + "").toUpperCase()),
              t &&
                "PATH" !== n &&
                ((o = MorphSVGPlugin.convertToPath(o, !1)), (n = "PATH")),
              (e = o.getAttribute("PATH" === n ? "d" : "points") || ""),
              o === r && (e = o.getAttributeNS(null, "data-original") || e))
            : (console.warn("Invalid morph to: " + e), (e = !1))),
        e
      );
    },
    S =
      b("#shapeIndexLabel")[0] ||
      ((o = x.createElement("div")),
      (n = x.createElement("div")),
      (a = b("body")[0]),
      (d = x.createElement("div")),
      (c = x.createElement("div")),
      n.setAttribute("id", "shapeIndexLabel"),
      (l = f("circle", {
        cx: 0,
        cy: 0,
        r: (r.startStrokeWidth || 3) + 3,
        fill: r.startStroke || "red",
      })),
      (s = f("circle", {
        cx: 0,
        cy: 0,
        r: (r.endStrokeWidth || 3) + 3,
        fill: r.endStroke || "yellow",
      })),
      gsap.set(o, {
        padding: "0px",
        position: "absolute",
        bottom: 0,
        fontSize: "20px",
        textAlign: "center",
        backgroundColor: "black",
        color: "#91e600",
        border: "1px solid #999",
        left: "50%",
        xPercent: -50,
        yPercent: -50,
        userSelect: "none",
        fontFamily: "sans-serif",
        zIndex: 100,
      }),
      gsap.set(n, {
        display: "inline-block",
        minWidth: "210px",
        marginRight: "10px",
        textAlign: "center",
        marginLeft: "10px",
      }),
      gsap.set([d, c], {
        display: "inline-block",
        padding: "0 15px",
        color: "#ccc",
        height: "50px",
        lineHeight: "48px",
        cursor: "pointer",
      }),
      gsap.set(c, { borderRight: "1px solid #999" }),
      gsap.set(d, { borderLeft: "1px solid #999" }),
      (c.innerHTML = " - "),
      (d.innerHTML = " + "),
      o.appendChild(c),
      o.appendChild(n),
      o.appendChild(d),
      a && a.appendChild(o),
      n),
    T = 0,
    A = function () {
      p.reversed(!p.reversed()).resume(), $.reversed(!$.reversed()).resume();
    },
    P = { x: 0, y: 0 },
    C = function (e, t, r) {
      return (
        (g = MorphSVGPlugin.stringToRawPath(e)),
        (u = MorphSVGPlugin.stringToRawPath(t)),
        MorphSVGPlugin.equalizeSegmentQuantity(g, u, r),
        [g[0][0], g[0][1], u[0][0], u[0][1]]
      );
    },
    w = function () {
      var t = C(I, N, T);
      (P.x = t[0]),
        (P.y = t[1]),
        l.setAttribute("cx", P.x),
        l.setAttribute("cy", P.y),
        s.setAttribute("cx", t[2]),
        s.setAttribute("cy", t[3]),
        (p = gsap.fromTo(
          e,
          { morphSVG: I },
          {
            delay: 0.5,
            duration: r.duration || 3,
            morphSVG: { shape: N, shapeIndex: T },
            ease: r.ease || "none",
            onComplete: A,
            onReverseComplete: A,
            overwrite: !0,
          }
        )),
        ($ = gsap.to(P, {
          delay: 0.5,
          duration: r.duration || 3,
          x: t[2],
          y: t[3],
          ease: r.ease || "none",
          onUpdate: function () {
            l.setAttribute("cx", P.x), l.setAttribute("cy", P.y);
          },
        }));
    },
    L = function () {
      (S.innerHTML = "shapeIndex: " + T + (T === m ? " (auto)" : "")),
        p.seek(0).kill(),
        $.seek(0).kill(),
        w(),
        gsap.fromTo(
          S.parentNode,
          0.4,
          { backgroundColor: "#777" },
          { backgroundColor: "black", ease: "none" }
        );
    },
    R = function () {
      (T = (T + 1) % (h + 1)), L();
    },
    E = function () {
      (T = (T - 1) % (h + 1)), L();
    };
  if (("string" == typeof e && (e = gsap.utils.toArray(e)[0]), e)) {
    if (e.nodeName && "PATH" !== e.nodeName.toUpperCase()) {
      console.log("ERROR: target of findShapeIndex() must be a path.");
      return;
    }
    e.push && e[0] && e[0].nodeName && (e = e[0]);
  } else {
    console.log(
      "ERROR: target not found for findShapeIndex(). Please use a valid target."
    );
    return;
  }
  e.parentNode && (e.parentNode.appendChild(s), e.parentNode.appendChild(l)),
    ("string" != typeof t || (t.match(_) || []).length < 3) &&
      (y = gsap.utils.toArray(t)) &&
      y[0] &&
      ((y = y[0]),
      gsap.set(y, {
        display: "block",
        strokeWidth: r.endStrokeWidth || 3,
        stroke: r.endStroke || "yellow",
        fill: r.endFill || "none",
        visibility: "visible",
        opacity: r.endOpacity || 0.7,
      })),
    gsap.set(e, {
      display: "block",
      strokeWidth: r.startStrokeWidth || 3,
      stroke: r.startStroke || "red",
      fill: r.startFill || "none",
      visibility: "visible",
      opacity: r.startOpacity || 0.7,
    }),
    (g = MorphSVGPlugin.stringToRawPath(e.getAttribute("d"))),
    (u = MorphSVGPlugin.stringToRawPath(v(t, !0))),
    (m = T =
      Math.round(MorphSVGPlugin.equalizeSegmentQuantity(g, u, "auto")[0])),
    (h = (g[0].length / 6) | 0),
    gsap.killTweensOf([e, t]);
  let I = v(e, !0),
    N = v(t, !0);
  w(),
    (S.innerHTML = "shapeIndex: " + T + (T === m ? " (auto)" : "")),
    window.addEventListener("keydown", function (e) {
      var t = e.keyCode;
      38 === t || 39 === t || 85 === t
        ? R()
        : (37 === t || 40 === t || 68 === t) && E();
    }),
    d.addEventListener("click", R),
    c.addEventListener("click", E);
}
